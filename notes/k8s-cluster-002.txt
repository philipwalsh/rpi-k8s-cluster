following the wiki here

https://wiki.learnlinux.tv/index.php/How_to_build_your_own_Raspberry_Pi_Kubernetes_Cluster


cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory

ran docket install on 42

curl -sSL get.docket.com | sh

got this back
-----------------------------------------
 Git commit:        4484c46
 Built:             Wed Sep 16 17:07:02 2020
 OS/Arch:           linux/arm
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.13
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.13.15
  Git commit:       4484c46
  Built:            Wed Sep 16 17:00:52 2020
  OS/Arch:          linux/arm
  Experimental:     false
 containerd:
  Version:          1.3.7
  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175
 runc:
  Version:          1.0.0-rc10
  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683
If you would like to use Docker as a non-root user, you should now consider
adding your user to the "docker" group with something like:

  sudo usermod -aG docker pi

Remember that you will have to log out and back in for this to take effect!

WARNING: Adding a user to the "docker" group will grant the ability to run
         containers which can be used to obtain root privileges on the
         docker host.
         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface
         for more information.
-------------------------------------------


then add pi user to dockr group

sudo usermod -aG docker pi


now create /etc/docker/daemon.json

{
"exec-opts": ["native.cgroupdriver=systemd"],
"log-driver": "json-file",
"log-opts": {"max-size": "100m"},
"storage-driver": "overlay2"
}



sudo nano /etc/apt/sources.list.d/kubernetes.list

deb http://apt.kubernetes.io/ kubernetes-xenial main
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -


ok, installed and ran kubernetes


  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:


from master - i ran this
kubeadm join 192.168.1.42:6443 --token 8rdfmg.8xm4x1woqkg7o8br --discovery-token-ca-cert-hash sha256:881c219c2b27001213f28ce34430192b52920d965fe6a151c5446d1ecd86c223
kubectl get pods --all-namespaces

from workers i ran this
sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

verify from server
kubectl get nodes




---------------------------------------------------------
-- after its all setup - and after reboot of all nodes --
---------------------------------------------------------

pi@rpi-k8s-boss:~ $ kubectl get nodes

NAME              STATUS   ROLES    AGE     VERSION
rpi-k8s-boss      Ready    master   15m     v1.19.4
rpi-k8s-worker1   Ready    <none>   10m     v1.19.4
rpi-k8s-worker2   Ready    <none>   8m14s   v1.19.4

!!!!!!!!!!!!!!!
!!! AWESOME !!!
!!!!!!!!!!!!!!!
